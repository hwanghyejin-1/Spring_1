#spring

1. DB 생성
   - dbeaver
   
CREATE TABLE str_product(
   PNO NUMBER NULL,
   TITLE varchar2(200) NOT NULL,
   WRITER varchar2(100) NOT NULL,
   CONTENT varchar2(2000) NOT NULL,
   REG8 DATE DEFAULT sysdate,
   MOD8 DATE DEFAULT sysdate,
   READCOUNT NUMBER DEFAULT 0,
   IMGFILE VARCHAR2(2000)
);

ALTER TABLE STR_PRODUCT
ADD CONSTRAINT STR_PRODUCT_PK PRIMARY KEY(PNO)
ENABLE;

CREATE SEQUENCE SEQENCE_PRODUCT INCREMENT BY 1 MINVALUE 0 NOCACHE NOORDER;

2. src/main/java 패키지 생성
 - com.myweb.ctrl
 - com.myweb.domain
 - com.myweb.persistence
 - com.myweb.service
 
 (1) com.myweb.domain -> ProductVO 생성
    - VO 역할: 각 계층간 데이터 교환을 위한 자바 객체
 (2) com.myweb.persistence ->ProductDAO 생성
    - DAO 역할: DB를 사용해 데이터를 조회하거나 조작하는 기능을 전담하도록 만든 객체
 (3) com.myweb.service ->ProductService 생성
     - Service 역할: DAO가 DB에서 받아온 데이터를 전달받아 가공

3. src/main/resources -> META-INF
 (1) mappers 폴더 생성 -> ProductMapper.xml 생성
 - google 에서 Mybatis 검색 -> 시작하기 -> 매핑된 SQL 구문 살펴보기( https://mybatis.org/mybatis-3/ko/getting-started.html)에서
================================================
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 코드 복사, 붙여넣기
================================================

4. src/main/resources -> MybatisConfig.xml 생성
★ MybatisConfig.xml에서 아래 코드 입력시, com.myweb.domain.ProductVO 대신 pvo 사용가능 (코드 간편화)
==================================================================
<configuration>
	<typeAliases>
		<!--<package name = "com.myweb.domain" /> -->
		<typeAlias type = " com.myweb.domain.ProductVO" alias="pvo"></typeAlias>
	</typeAliases>
</configuration>
==================================================================

5. ProductMapper.xml에서 코드 수정
???????????????????????뭔소린지 모르겟음
★ProductMapper.xml에서 아래코드 추가하면
===================
<sql id = "pno_cond">
where pno = #{pno} 
===================
select * from tbl_product 
  		<include refid="pno_cond"/> 이것처럼  <include refid="pno_cond"/>  넣어주면 
select * from tbl_product where pno = #{pno} 이거랑 동일함  지금 코드는 짧지만 조건절 엄청 길어질때 유용
 

● ProductMapper.xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
  <mapper namespace ="ProductMapper">
  <sql id = "pno_cond">
  where pno #{pno}
  </sql> 
  <insert id ="add" parameterType="pvo">
  	insert into str_product
  	values(sequence_product.nectval,
  	#{title},
  	#{content}
  	#{writer},
  	sysdate sysdate,
  	0,
  	#{imgfile})
  </insert>
  
  <select id ="List" resultType="pvo">
  	select pno,title,writer,readcount,modd8
  	from str_product order by pno desc
  </select>
  
  <select id ="detail" parameterType="java.lang.Integer" resultType="pvo">
  	select * from str_prdouct
  	<include refid="pno_cond"/>
  </select>
  
  <update id ="modify" parameterType="pvo">
  	update str_product 
  	set titie=#{title}, content=#{content}, modd8 = sysdate, imgfile = #{imgfile}
  	where pno = #{pno}
  </update>
  
  <delete id = "remove" parameterType="java.lang.Integer">
  	delete from str_product 
  	where pno = #{pno}
  </delete>
  </mapper>


6. (1) com.myweb.persistence 패키지 -> ProductDAOImpl.java. 생성
 - ProductDAO 인터페이스를 구현하는 구현체는 ProductDAOImpl클래스로 작성 
   (2) com.myweb.service 패키지 -> ProductServiceImpl.java 생성
- ProductService 인터페이스를 구현하는 구현체는 ProductServiceImpl클래스로 작성 
  =>implements 두가지 방법
     1) ProductDAOImpl 클래스 생성 시 add에서 ProductDAO 인터페이스 클릭하고 클래스 생성하기
     2) ProductDAOImpl 클래스 생성하고, implements productDAO 코드 넣고, add unimplemented methods 클릭하기

7. ProductDAOImpl 코드 수정
====================================================================
package com.myweb.persistence;

import java.util.List;
import javax.inject.Inject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Repository;
import com.myweb.domain.ProductVO;

@Repository
public class ProductDAOImpl implements ProductDAO {
	private static final Logger log = LoggerFactory.getLogger(ProductDAOImpl.class);
	private static String ns = "ProductMapper."; /*ns = namespace*/
	
	@Inject
	private SqlSession sql;

	@Override 
	public void insert(ProductVO pvo) {
		sql.insert(ns + "add",pvo);

	}

	@Override
	public List<ProductVO> selectList() {
		return sql.selectList(ns+"list");
	}

	@Override
	public ProductVO selectOne(Integer pno) {
		return sql.selectOne(ns + "detail",pno);
	}

	@Override
	public void update(ProductVO pvo) {
		sql.update(ns+"modify", pvo);

	}

	@Override
	public void delete(Integer pno) {
		sql.delete(ns+"remove",pno);

	}
}
====================================================================

8. ProductServiceImpl 코드 수정
====================================================================
package com.myweb.service;

import java.util.List;
import javax.inject.Inject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import com.myweb.domain.ProductVO;
import com.myweb.persistence.ProductDAO;

@Service
public class ProductServiceImpl implements ProductService {
	private static final Logger log = LoggerFactory.getLogger(ProductServiceImpl.class);
	
	@Inject
	private ProductDAO pdao;
	

	@Override
	public void write(ProductVO pvo) {
		pdao.insert(pvo);
		
	}

	@Override
	public List<ProductVO> list() {
		return pdao.selectList();
	}

	@Override
	public ProductVO detail(Integer pno) {
		return pdao.selectOne(pno);
	}

	@Override
	public void modify(ProductVO pvo) {
		pdao.update(pvo);
		
	}

	@Override
	public void remove(Integer pno) {
		pdao.delete(pno);
		
	}

}
====================================================================

9. home.jsp 코드 수정
======================================================================
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ page langauage="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<jsp:include page="00_header.jsp"></jsp:include>
<jsp:include page="10_nav.jsp"></jsp:include>
<jsp:include page="90_footer.jsp"></jsp:include>
======================================================================

10. WEN-INF views에 JSP파일 생성
 (1) 00_header.jsp
 (2) 10_nav.jsp
 (3) 90_footer.jsp

