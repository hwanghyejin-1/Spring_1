#spring



1. DB 생성
   - dbeaver
   
CREATE TABLE str_product(
   PNO NUMBER NULL,
   TITLE varchar2(200) NOT NULL,
   WRITER varchar2(100) NOT NULL,
   CONTENT varchar2(2000) NOT NULL,
   REG8 DATE DEFAULT sysdate,
   MOD8 DATE DEFAULT sysdate,
   READCOUNT NUMBER DEFAULT 0,
   IMGFILE VARCHAR2(2000)
);

ALTER TABLE STR_PRODUCT
ADD CONSTRAINT STR_PRODUCT_PK PRIMARY KEY(PNO)
ENABLE;

CREATE SEQUENCE SEQENCE_PRODUCT INCREMENT BY 1 MINVALUE 0 NOCACHE NOORDER;

2. src/main/java 패키지 생성
 - com.myweb.ctrl
 - com.myweb.domain
 - com.myweb.persistence
 - com.myweb.service
 
 (1) com.myweb.domain -> ProductVO 생성
    - VO 역할: 각 계층간 데이터 교환을 위한 자바 객체
 (2) com.myweb.persistence ->ProductDAO 생성
    - DAO 역할: DB를 사용해 데이터를 조회하거나 조작하는 기능을 전담하도록 만든 객체
 (3) com.myweb.service ->ProductService 생성
     - Service 역할: DAO가 DB에서 받아온 데이터를 전달받아 가공

3. src/main/resources -> META-INF
 (1) mappers 폴더 생성 -> ProductMapper.xml 생성
 - google 에서 Mybatis 검색 -> 시작하기 -> 매핑된 SQL 구문 살펴보기( https://mybatis.org/mybatis-3/ko/getting-started.html)에서
================================================
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 코드 복사, 붙여넣기
================================================

4. src/main/resources -> MybatisConfig.xml 생성
★ MybatisConfig.xml에서 아래 코드 입력시, com.myweb.domain.ProductVO 대신 pvo 사용가능 (코드 간편화)
==================================================================
<configuration>
	<typeAliases>
		<!--<package name = "com.myweb.domain" /> -->
		<typeAlias type = " com.myweb.domain.ProductVO" alias="pvo"></typeAlias>
	</typeAliases>
</configuration>
==================================================================

5. ProductMapper.xml에서 코드 수정
???????????????????????추후 설명
★ProductMapper.xml에서 아래코드 추가하면
===================
<sql id = "pno_cond">
where pno = #{pno} 
===================
select * from tbl_product 
  		<include refid="pno_cond"/> 이것처럼  <include refid="pno_cond"/>  넣어주면 
select * from tbl_product where pno = #{pno} 이거랑 동일함  지금 코드는 짧지만 조건절 엄청 길어질때 유용
 

● ProductMapper.xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
  <mapper namespace ="ProductMapper">
  <sql id = "pno_cond">
  where pno #{pno}
  </sql> 
  <insert id ="add" parameterType="pvo">
  	insert into str_product
  	values(sequence_product.nectval,
  	#{title},
  	#{content}
  	#{writer},
  	sysdate sysdate,
  	0,
  	#{imgfile})
  </insert>
  
  <select id ="List" resultType="pvo">
  	select pno,title,writer,readcount,modd8
  	from str_product order by pno desc
  </select>
  
  <select id ="detail" parameterType="java.lang.Integer" resultType="pvo">
  	select * from str_prdouct
  	<include refid="pno_cond"/>
  </select>
  
  <update id ="modify" parameterType="pvo">
  	update str_product 
  	set titie=#{title}, content=#{content}, modd8 = sysdate, imgfile = #{imgfile}
  	where pno = #{pno}
  </update>
  
  <delete id = "remove" parameterType="java.lang.Integer">
  	delete from str_product 
  	where pno = #{pno}
  </delete>
  </mapper>


6. (1) com.myweb.persistence 패키지 -> ProductDAOImpl.java. 생성
 - ProductDAO 인터페이스를 구현하는 구현체는 ProductDAOImpl클래스로 작성 
   (2) com.myweb.service 패키지 -> ProductServiceImpl.java 생성
- ProductService 인터페이스를 구현하는 구현체는 ProductServiceImpl클래스로 작성 
  =>implements 두가지 방법
     1) ProductDAOImpl 클래스 생성 시 add에서 ProductDAO 인터페이스 클릭하고 클래스 생성하기
     2) ProductDAOImpl 클래스 생성하고, implements productDAO 코드 넣고, add unimplemented methods 클릭하기

7. ProductDAOImpl 코드 수정
====================================================================
package com.myweb.persistence;

import java.util.List;
import javax.inject.Inject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Repository;
import com.myweb.domain.ProductVO;

@Repository
public class ProductDAOImpl implements ProductDAO {
	private static final Logger log = LoggerFactory.getLogger(ProductDAOImpl.class);
	private static String ns = "ProductMapper."; /*ns = namespace*/
	
	@Inject
	private SqlSession sql;

	@Override 
	public void insert(ProductVO pvo) {
		sql.insert(ns + "add",pvo);

	}

	@Override
	public List<ProductVO> selectList() {
		return sql.selectList(ns+"list");
	}

	@Override
	public ProductVO selectOne(Integer pno) {
		return sql.selectOne(ns + "detail",pno);
	}

	@Override
	public void update(ProductVO pvo) {
		sql.update(ns+"modify", pvo);

	}

	@Override
	public void delete(Integer pno) {
		sql.delete(ns+"remove",pno);

	}
}

====================================================================================
★SqlSesstion 에러 해결하기 -> MyBatis와 Spring을 연동하는 라이브러리를 추가하지 않아서 발생
★ pom.xml
===========================================
<!-- DB -->
①<dependency>
	<groupId>com.zaxxer</groupId>
	<artifactId>HikariCP</artifactId>
	<version>3.4.2</version>
</dependency>
②<dependency>
	<groupId>org.mybatis</groupId>
	<artifactId>mybatis</artifactId>
	<version>3.4.6</version>
</dependency>	
③<dependency>
	<groupId>org.mybatis</groupId>
	<artifactId>mybatis-spring</artifactId>
	<version>1.3.2</version>
</dependency>
④<dependency>
	<groupId>org.springframework</groupId>
	 <artifactId>spring-tx</artifactId>
	 <version>${org.springframework-version</version>
</dependency>
<dependency>
	<groupId>org.springframework</groupId>
	<artifactId>spring-jdbc</artifactId>
	<version>${org.springframework-version}</version>
</dependency>
⑥<dependency>
	<groupId>mysql</groupId>
	<artifactId>mysql-connector-java</artifactId>
	<version>5.1.48</version>
</dependency>

===========================================
<!-- DB --> 코드 설명
① 코드 
1. 커넥션 풀 설정
 : 여러명의 사용자를 동시에 처리해야 하는 웹 어플리케이션의 경우 데이터베이스 연결을 이용할때는 커넥션 풀 이용
  여러 종류가 있고, spring-jdbc 라이브러리를 이용하는 방식도 있지만, 최근 HikariCP을 많이 사용
★ pom.xml에  HikariCP 추가
★ root-context.xml 코드 추가
=========================================================

=========================================================


②~⑤ 코드
2. MyBatis와 스프링 연동
★ pom.xml에 MyBatis와 Mybatis-spring 사용을 위한 라이브러리 추가
★ root-context.xml 코드 추가

②mybatis/③mybatis-spring
: MyBatis와 스프링 연동용 라이브러리
④spring-jdbc/⑤spring-tx
: 스프링에서 데이터베이스 처리와 트랜잭션 처리
(해당 라이브러리들은 MyBatis와 무관하게 보이지만 추가하지 않은 경우에 에러가 발생하므로 주의)

⑥ 코드
강사님 프로젝트 pom.xml코드를 참고(추후 설명)


====================================================================================

8. ProductServiceImpl 코드 수정
====================================================================================
package com.myweb.service;

import java.util.List;
import javax.inject.Inject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import com.myweb.domain.ProductVO;
import com.myweb.persistence.ProductDAO;

@Service
public class ProductServiceImpl implements ProductService {
	private static final Logger log = LoggerFactory.getLogger(ProductServiceImpl.class);
	
	@Inject
	private ProductDAO pdao;
	

	@Override
	public void write(ProductVO pvo) {
		pdao.insert(pvo);
		
	}

	@Override
	public List<ProductVO> list() {
		return pdao.selectList();
	}

	@Override
	public ProductVO detail(Integer pno) {
		return pdao.selectOne(pno);
	}

	@Override
	public void modify(ProductVO pvo) {
		pdao.update(pvo);
		
	}

	@Override
	public void remove(Integer pno) {
		pdao.delete(pno);
		
	}

}
====================================================================

9. (1)home.jsp 코드 수정
======================================================================
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ page langauage="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<jsp:include page="00_header.jsp"></jsp:include>
<jsp:include page="10_nav.jsp"></jsp:include>
<jsp:include page="90_footer.jsp"></jsp:include>
======================================================================
    (2) home.jsp 코드 수정
 w3School -> Bootstrap4 -> BS4 Jumbotron ->Bootstrap 4 Jumbotron -> Example 코드 복사 붙여넣기
======================================================================
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ page langauage="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<jsp:include page="00_header.jsp"></jsp:include>
<jsp:include page="10_nav.jsp"></jsp:include>
<jsp:include page="90_footer.jsp"></jsp:include>

<div class="jumbotron">
  <h1>Bootstrap Tutorial</h1>
  <p>Bootstrap is the most popular HTML, CSS...</p>
</div>
======================================================================


10. JUnit 설정
 프로젝트 오른쪽마우스-> properties -> java build path -> libraries -> Add Libraries -> JUnit 선택 -> Apply
11. 버전 변경
https://offbyone.tistory.com/16


12. WEN-INF views에 JSP파일 생성
(home.jsp에서
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ page langauage="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>코드 상단에 모두 복사 붙여넣기 )
 (1) 00_header.jsp
 (2) 10_nav.jsp
 (3) 90_footer.jsp
 (4) temp.jsp

# Bootstrap4를 이용해서 코드 복사 붙여넣기 
# w3School -> Bootstrap4를 이용해서 코드 복사 붙여넣기 


(1)00_header.jsp
 Bootstrap4 -> get started -> start template 코드 복사 붙여넣기
 <script src = ~~>부분 세줄 코드 복사 ->  00_footer에 붙여넣기 (복사한 코드는 지우기)
===================================================================================================
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ page langauage="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>

<!doctype html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">

    <title>Hello, world!</title>
  </head>
  <body>
    <h1>Hello, world!</h1>
  </body>
</html>
===================================================================================================
 
(2) 10_nav.jsp
 -> w3School -> Bootstrap4 -> BS4Navs -> Nav Menus -> Example 코드 복사 붙여넣기
 -> <h2> 부분은 추후 설명
===================================================================================================
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ page langauage="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>

<h2 class="text-center mt-5">스프링 게시판 연습</h2>

<ul class="nav">
  <li class="nav-item">
    <a class="nav-link" href="#">Link</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" href="#">Link</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" href="#">Link</a>
  </li>
  <li class="nav-item">
    <a class="nav-link disabled" href="#">Disabled</a>
  </li>
</ul>
===================================================================================================

(3) 90_footer.jsp
 ->00_header.jsp 에서 <script scr~> 코드 받아옴
 -> <h6> 부분은 추후 설명
===================================================================================================
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ page langauage="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>

    <h6 class="text-center mt-5">
     Copyright 1999-2020 by Hwang Hyejin. All Rights Reserved.
    </h6>

 <script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>
 <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
 <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
===================================================================================================


project properties java build --> jre ~~library 어쩌고 체크햇음


<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/shema/context/spring-context-4.3.xsd">
				
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
	<!-- <property name="driverClassName"
	value="oracle.jdbc.driver.OracleDriver"></property>
	<property name="jdbcUrl"
	value="jdbc:oracle:thin:@localhost:1521:XE"></property> -->
	
	<property name="driverClassName"
	value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
	<property name="jdbcUrl"
	value="jdbc:log4jdbc:oracle:thin:@localhost:521:XE"></property>
	
	<property name="username" value="springdb"></property>
	<property name="password" value="springuser"></property>
	</bean>
	
	<!-- HikariCP configuration  -->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource"
	destroy-method="close">
	<constructor-arg ref="hikariConfig" />
	</bean>
	
	<bean id="sqlSessionFactory" 
		  class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<bean id="sqlSessionFactory" 
		  class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<mybatis-spring:scan 
		base-package="org.zerock.mapper"></mybatis-spring:scan>
	
	<context:component-scan	
		base-package="org.zerock.sample"></context:component-scan>		
</beans>


