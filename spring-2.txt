Controller   service       dao (ojdbc)  db



write.jsp시작
1. write.jsp 생성(views -> Product)
 -> temp.jsp 열어둔 상태에서 File-> save as로  생성하면 코드 내용 그대로 나타남
=========================================================================
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ page language="java" contentType="text/html; charset=UTF-8"
  pageEncoding="UTF-8"%>
<jsp:include page="../00_header.jsp"></jsp:include>
<jsp:include page="../10_nav.jsp"></jsp:include>

<h2>상품 등록하기</h2>  -------------- (1)
<form method="post"> ------------ (2)
	<div class="form-group"> ------------ (3)
	<label for="title">Title</label> ----------- (4)
	<input type="text" class="form-control" placeholder="상품명" id="title" name="title"> ----- (5)
	</div>
	
	<div class="form-group">
	<label for="title">Writer</label>
	<input type="text" class="form-control" placeholder="등록자" id="writer" name="writer">
	</div>
	
	<div class="form-group">
	<label for="title">File</label>
	<input type="text" class="form-control" placeholder="파일등록예정" id="imgfile" name="imgfile">
	</div>
	
	<div class="form-group">
	<label for="content">Content</label>
	<textarea class="form-control" rows="5" id="content" name="content"></textarea> ------(6)
	</div>
	<button type="submit" class="btn btn-primary">Submit</button> ------- (7)
</form>
<jsp:include page="../90_footer.jsp"></jsp:include>
=========================================================================
(1) <h2></h2> 태그
 :  HTTP 제목 태그
   <h1> ~ <h6> 이 존재하며, 숫자가 커질수록 글씨 크기가 작아진다.

(2) <form method="post">
=> post방식으로 전송한다. 
- <form></form> 태그
 : name, action, method, target 등의 속성을 가진다.
  폼 속성을 이용하여 전송할 때 어디로 보내야 하는지 어떤 방법으로 보낼지 정한다.
  -> name: 폼을 식별하기 위한 이름을 지정
  -> action: 폼을 전송할 서버 쪽 스크립트 파일 지정
  -> method: 폼을 서버에 전송할 http 메소드를 지정(GET 또는 POST)
  -> target: action에서 지정한 스크립트 파일을 현재 창이 아닌 다른 위치에 열도록 지정
  -> accept-charset: 폼 전송에 사용할 문자 인코딩 지정 

(3) <div class="form-group">
=> 각각을 그룹으로 배치한다. 
- <div></div> 태그
 : 웹 사이트의 레이아웃(전체적인 틀)을 만들때 주로 사용

(4) <label for="title">Title</label> 
=>
- <label></label> 태그
 : 사용자 인터페이스(UI) 요소의 라벨을 정의할 때 사용
  for 속성을 사용하여 다른 요소와 결합할 수 있으며, (결합하고자 하는 요소 내부에 위치 시키면 for속성 없이 결합 가능)
  이때 <label> 요소의 for 속성값은 결합하고자 하는 요소의 id 속성값과 같아야 한다.
  -> <label>요소를 사용할 수 있는 요소
      : <button>, <input>, <meter>, <output>, <progress>, <select>, <textarea>

(5) <input type="text" class="form-control" placeholder="상품명" id="title" name="title">
=> 
- <input>태그
 : 사용자로부터 정보를 입력 받을 수 있게 해주는 태그, 한 줄만 입력 가능
  type 속성의 설정값에 따라 다양한 입력양식을 사용 할 수 있다.
  -> <input> 태그의 기본 속성
       - type: 입력 태그의 유형을 설정하는 속성
       - value: 입력 태그의 초기값을 설정하는 속성
       - name: 서버로 전달되는 이름을 설정하는 속성

(6) <textarea class="form-control" rows="5" id="content" name="content"></textarea> 
=>
- <textarea>태그
 : 사용자가 여러 줄의 텍스트를 입력할 수 있는 텍스트 입력 영역을 정의할 떄 사용
  텍스트 입력 영역에는 개수의 제한 없이 문자를 입력할 수 있으며, 입력된 문자는 고정폭 글꼴로 렌더링 된다. 
  텍스트 입력 영역의 크기는 <textarea> 요소의 cols(너비) 속성과 rows(높이) 속성으로 지정할 수 있으며,
   CSS에서 height 속성과 width 속성을 사용하면 더욱 손쉽게 지정할 수 있다. 

(7) <button type="submit" class="btn btn-primary">Submit</button>
=> submit을 버튼 형태로 만든다.
- <button></button>
 : 버튼 요소 안에 텍스트나 이미지 같은 내용을 넣을 수 있다.
   button 태그를 사용할 때는 항상 type 속성을 지정한다.
   form 양식에서 버튼을 만들려면, <button>태그보다 <input type="">을 사용한다.

2. ProductController.java 생성 (src/main/java -> com.myweb.ctrl)
====================================================================================
package com.myweb.ctrl;

import javax.inject.Inject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import com.myweb.domain.ProductVO;
import com.myweb.service.ProductService;

@Controller     ----------- (1)
@RequestMapping("/Product/*")     ----------- (2)

public class ProductCtrl {
	private static final Logger log = LoggerFactory.getLogger(ProductController.class); ----------- (3)
	@Inject ----------- (4)
	private ProductService psv; 
	
	@RequestMapping(value="/write", method=RequestMethod.GET) ----------- (5)  ---> a href
	public void write() {
		log.info(">>> 상품 등록 페이지 출력 - GET");
	}
	
	@RequestMapping(value="/write", method=RequestMethod.POST) ----------- (6)  ---> form
	public String write(ProductVO pvo, @RequestParam("imgfile")String imgfile, RedirectAttributes reAttr) {
		log.info(">>> 상품 등록 페이지 출력 - POST");
		psv.write(pvo);
		return "redirect:/product/list";
	}
	
	@RequestMapping(value="/list", method=RequestMethod.GET) ----------- (7)
	public void list(Model model) {
		log.info(">>> 리스트 출력 - GET");
	}
====================================================================================
(1) @Controller : 해당 클래스가 Controller임을 나타내기 위한 어노테이션

(2) @RequestMapping("/Product/*") : 
=> Product 이하의 경로는 모두 ProductController에서 처리한다.
 - @RequestMapping 
  : 요청에 대해 어떤 Controller, 어떤 메소드가 처리할지를 맵핑하기 위한 어노테이션
    URL을 컨트롤러의 메서드와 매핑할 때 사용하는 스프링 프레임워크의 어노테이션

(3) private static final Logger log = LoggerFactory.getLogger(ProductController.class);
=> log 명시를 위해 생성
=> private static final을 사용하는 이유?
     : - private: 다른 클래스가 logger할수 없도록 private 사용한다.
       - static: 클래스 당 하나의 로거가 아니라 클래스 당 하나의 로거만 생성 함을 의미한다. 
                  (logger는 각 클래스 인스턴스마다 별도의 인스턴스가 필요하지 않으므로 static사용)
                  (성능을 위한 것 ->잘 최적화되고(최종) 메모지를 절약 할수 있다.(정적))
       - final: logger 변수의 값을 변경하지 않을 것임을 의미한다.
       

(4) @Inject
     private ProductService psv; 
=> ProductService를 psv로 자동 주입 @@@@@@@@@@@@@@@@@@@@@

 - @Inject   
  : 주입하려고 하는 객체의 타입이 일치하는 객체를 자동으로 주입한다.
 - private
  : public과 반대로 외부로부터 모든 접근을 차단한다. (클래스, 메소드, 변수의 외부 접근이 하나도 안됨)

(5) @RequestMapping(value="/write", method=RequestMethod.GET) 
	public void write() {
		log.info(">>> 상품 등록 페이지 출력 - GET");
	}
=> GET방식으로 Product/write 값을 받는다.
    값을 제대로 받았는지 확인하기 위해 log를 통해 출력한다.

- RequestMethod
 : HTTP 메서드를 정의한 ENUM
  GET, POST, PUT, DELETE, OPTIONS, TRACE 총 7개의 HTTP 메서드가 정의되어 있다.
- RequestMethod.GET : 요청받은 URI의 정보를 검색하여 응답한다. (<a href ~>태그)

(6) @RequestMapping(value="/write", method=RequestMethod.POST) 
	public String write(ProductVO pvo, @RequestParam("imgfile")String imgfile, RedirectAttributes reAttr) {
		log.info(">>> 상품 등록 페이지 출력 - POST");
		psv.write(pvo);
		return "redict:/product/list";
	}
=> POST 방식으로 product/write 값을 게시한다.
ProductVO(pvo)에 명시된 값들, imgfile로 이 값들을 write 동작으로 게시하고, 다른 경로로 보내주기위해 RedirectAttributes를 명시한다. 
값을 제대로 받았는지 확인하기 위해 log를 통해 출력한다.
ProductVO(pvo) 에 명시된 값들을 ProductService(psv)에 명시된 write 동작을 이용해서 실행한다.
제대로 작동하면 redirect를 통해 Product/list로 경로를 재요청하여 값을 보내준다.
 
- RequestMethod.POST : 요청된 자원을 생성(Create)한다. (쉽게 말해서 게시한다고 생각)
- @RequestParam 
: 단일 파라미터를 전달 받을 때 사용하는 어노테이션   /* 파라미터(매개변수): 메소드 수행에 필요한 입력 값을 저장하는 변수
 파라미터로 사용된 변수의 이름과 전달되는 파라미터의 이름이 다른경우 유용하게 사용된다. 
- RedirectAttributes 
: redirect 경로에 데이터를 넘기고 싶을 때 사용
 

(7) @RequestMapping(value="/list", method=RequestMethod.GET) 
	public void list(Model model) {
		log.info(">>> 리스트 출력 - GET");
	}
=> GET 방식으로 product/list 값을 주입한다.
 Model 타입으로 파라미터를 선언하여 list에 전달 한다.
 값이 제대로 전달되었는지 확인하기 위해 log를 이용하여 출력한다. 
 
- Model
: JSP에 컨트롤러에서 생성된 데이터를 담아서 전달하는 역할을 하는 존재
 메서드의 파라미터를 Model 타입으로 선언하면 자동으로 스프링 MVC에서 Model타입의 객체를 만들어 줌 
 -> 리스트 페이지 번호를 파라미터로 전달받고, 실제 데이터를 View로 전달해야하는 경우
 -> 파라미터들에 대한 처리 후 결과를 전달해야 하는 경우 

3. list.jsp 생성 (views -> Product)
 -> temp.jsp 열어둔 상태에서 File-> save as로  생성하면 temp.jsp 코드 내용 그대로 나타남
====================================================================================
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<%@ page language="java" contentType="text/html; charset=UTF-8"
  pageEncoding="UTF-8"%>
<jsp:include page="../00_header.jsp"></jsp:include>
<jsp:include page="../10_nav.jsp"></jsp:include>

<h1>성공하였습니까?</h1>
<script>  ---------------------------------------------------------------- (1)
	let result = '<c:out value="${result}" />';  ------------ (2)
	if(result == 'Write_ok'){
		alert("상품 등록이 완료되었습니다!");
	}
	result = "";
</script>

<jsp:include page="../90_footer.jsp"></jsp:include>
====================================================================================
(1) <script>태그
 : 자바스크립트로 클라이언트 측 스크립트를 정의하기 위해 사용
  스크립트 문을 직접 포함하거나, src속성을 통해 외부 스크립트를 적용 할 수 있다.

(2) let result = '<c:out value="${result}" />';  
=>
- c:out 태그
 : 자바에서의 System.out.println 메서드와 비슷한 역할을 가지고 있다.
  어떤 값을 입력받던지 간에 콘솔이 아닌 화면에 문자열로 바꾸어서 보여주는 역할을 한다. 
   -> 기본 형태: <c:out value="출력값" escapeXml="true나 false" default="출력값"/>
       예시: <c:out value="${value}"/>  

- alert
: alert창을 띄우는 기능,
 <script></script> 태그 안에 JavaScript 소스를 넣어 주면 된다.
  -> 예시 : <script> alert('hi); </script>  ===> 결과: alert 창에 hi 로 표시 됨

            
4. ProductMapper.xml
★ <select>, <update> 부분에 sql코드  where pno = #{pno} 추가 
★설명)   
<sql id ="pno_cond"> 
where pno #{pno}
</sql>
	.
	.
	.


  <select id="detail" parameterType="java.lang.Integer" resultType="pvo">
  		select*from str_product
  		<include refid="pno_cond"/> 
  </select>

 => <sql~>부분코드를 추가하면 sql문 작성시 조건절이 길때, <include refid="pno_cond"/>  코드로 대체하여 간편해짐
     현재 코드는 where pno=#{pno} 로 짧기 때문에 <include refid="pno_cond"/>는 주석처리 하였음
====================================================================================

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 
  <mapper namespace ="ProductMapper">
  <sql id ="pno_cond">
  where pno #{pno}
  </sql>
  <insert id="add" parameterType="pvo">
  		insert into str_product
  		values(sequence_product.nectval,
  		#{title},
  		#{content},
  		#{writer},
  		sysdate sysdate,
  		sysdate sysdate,
  		0,
  		#{imgfile})
  </insert>
  
  <select id="List" resultType="pvo">
  		select pno,title,writer,content,modd8,reg8,readcount
  		from str_product order by pno desc
  </select>
  
  <select id="detail" parameterType="java.lang.Integer" resultType="pvo">
  		select*from str_product
  		where pno = #{pno}		<!-- <include refid="pno_cond"/> -->
  </select>
  
  <update id="modify" parameterType="pvo">
  		update str_product
  		set title=#{title}, content=#{content}, modd8=sysdate, reg8=sysdate, imgfile=#{imgfile}
  		where pno = #{pno}
  </update>
  
  <delete id="remove" parameterType="java.lang.Integer">
  		delete from str_product
  		where pno=#{pno}
  </delete>
  </mapper>
====================================================================================
== log4j2.xml 수정
