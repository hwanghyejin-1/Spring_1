Part01 스프링 개발 환경 구축

★ 01. 개발을 위한 준비

1. JDK 설치 
 1) 다운로드 -> https://gabii.tistory.com/entry/Java-Java-JDK-%EC%84%A4%EC%B9%98-%EB%B0%8F-%ED%99%98%EA%B2%BD%EC%84%A4%EC%A0%95
 2) 환경변수에서 JAVA_HOME 설정
-> 사용자 변수 편집 
   -> 변수이름: JAVA_HOME
   -> 변수 값: (설치된 jdk 경로)
-> PATH에는  JDK의 bin 디렉토리를 '%JAVA_HOME%\bin'으로 지정 
 3) 다운로드 확인
  cmd(명령 프롬프트)에서  'javac' 명령어가 제대로 작동하는지 확인
 ->javac-version -> enter
 ->java-version -> enter

2. STS 설치
https://spring.io/tools

->Looking for Spring Tool Suite 3? 이부분에서  
->Find more information about version 3 of the Spring Tool Suite on the Spring Tool Suite 3 wiki including downloads, update site URLs, references to the new and noteworthy pages, and details of how to upgrade to Spring Tools 4.
   => 구 버전으로 클릭 -> full distribution on Eclipse 4.12

->https://download.springsource.com/release/STS/3.9.3.RELEASE/dist/e4.8/spring-tool-suite-3.9.3.RELEASE-e4.8.0-win32-x86_64.zip  
url 위처럼 수정 -> Enter -> 다운로드

3. Tomcat8 설치
톰캣8 다운로드 -->64-bit Windows zip (pgp, sha512)

4. 스프링, 자바 버전 변경
 1) 스프링 버전 변경
     - 교재에서는 스프링 5 버전 이용
     - pom.xml 수정 (원래 사용하던 pom.xml에서 spring버전만 수정함)
===========================================================
<name>Test01</name>
   <packaging>war</packaging>
   <version>1.0.0-BUILD-SNAPSHOT</version>
   <properties>
	<java-version>1.8</java-version>
	<org.springframework-version>5.0.7.RELEASE</org.springframework-version>
	<org.aspectj-version>1.6.10</org.aspectj-version>
	<org.slf4j-version>1.6.6</org.slf4j-version>
   </properties>
   <dependencies>
==========================================================
 2) 자바 버전 변경
  - 스프링 5.x 버전을 이용하고 싶다면 JDK 1.8버전을 사용하는 것이 가장 좋음
==========================================================
<plugin>
	<groupId>org.apache.maven.plugins</groupId>
	<artifactId>maven-compiler-plugin</artifactId>
	<version>3.5.1</version>
	<configuration>
	     <source>1.8</source>
	     <target>1.8</target>
	     <compilerArgument>-Xlint:all</compilerArgument>
	     <showWarnings>true</showWarnings>
	     <showDeprecation>true</showDeprecation>
	</configuration></plugin>

==========================================================
 => 코드 수정 후, 프로젝트 선택 -> Maven -> Update Project 실행
     JRE System Library [JavaSE-1.8]로 변경


5. Lombok 라이브러리 설치
 => Lombok을 이용하면 JAVA개발 시 자주 사용하는 getter/setter, toString(), 생성자 등을 자동으로 생성, 
      약간의 코드 만으로도 필요한 클래스 설계 시 유용
-> https://projectlombok.org에서 jar 파일 형태로 다운

★ 02. 스프링의 특징과 의존성 주입
 - 스프링 프레임워크를 이용해서 '의존성 주입'에 대한 이해와 테스트
 - 스프링에서 XML을 이용하는 객체 관리 방법
 - 스프링의 테스트 환경 구축
	
1. 스프링의 주요 특징
    (1) POJO 기반의 구성
    (2) 의존성 주입(DI)을 통한 객체 간의 관계 구성
    (3) AOP(Aspect-Origented-Programming)지원
        : spring은 AOP를 AspectJ의 문법을 통해서 작성
          -> 개발자는 핵심 비즈니스 로직에만 집중해서 코드 개발 가능
          -> 각 프로젝트마다 다른 관심사를 적용할 때 코드의 수정을 최소화
          -> 원하는 관심사의 유지보수가 수월한 코드 구성 
    (4) 편리한 MVC 구조
    (5) WAS의 종속적이지 않은 개발 환경

2. 의존성 주입 테스트
 - 스프링에서는 생성자를 이용한 주입, setter 메서드를 이용한 주입으로 의존성 주입 구현
   -> 설정 방식은 주로 XML이나 어노테이션 이용해서 처리
  (교재에서는 Lombok을 이용해서 setter 메서드를 자동으로 구현, 스프링 동작을 테스트하므로 
  pom.xml에서 Lombok라이브러리를 추가하고, spring-test 라이브러리 이용)

 1) 예제 클래스 생성
 - pom.xml 코드 추가 
===============================================================
<!-- Spring -->에 추가
<dependency>
	<groupId>org.springframework</groupId>
	<artifactId>spring-test</artifactId>
	<version>${org.springframework-version}</version>
</dependency>

<!-- Utils -->에 추가
<dependency>
	<groupId>org.projectlombok</groupId>
	<artifactId>lombok</artifactId>
	<version>1.18.0</version>
	<scope>provided</scope>
</dependency>

<!-- Logging -->에서 수정
<dependency>
	<groupId>log4j</groupId>
	<artifactId>log4j</artifactId>
	<version>1.2.17</version>
.
.
.
</dependency>

<!-- Test -->에서 수정
<dependency>
	<groupId>junit</groupId>
	<artifactId>junit</artifactId>
	<version>4.1.2</version>
	<scope>test</scope>
</dependency>  
===============================================================
 - src/main/java 에  com.myweb.sample 패키지 생성 후, Chef, Restaurant 클래스 생성 

 2) XML을 이용하는 의존성 주입 설정
 - root-context.xml
  => 스프링 프레임워크에서 관리해야하는 객체를 설정하는 설정 파일
=============================================================================================
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<context:component-scan base-package="org.myweb.sample"></context:component-scan>
	
</beans>
=============================================================================================

 3) 코드에 사용된 어노테이션들
 - Lombok 관련 어노테이션 : @Setter, @Data, @Log4j
     ① @Setter : setter메서드를 만들어주는 역할  
     ② @Data : Lombok에서 가장 자주 사용되는 어노테이션
       -> @ToString, @EqualsAndHashCode, @Getter/@Setter, @RequiredArgsConstructor를 모두 결합한 형태
     ③ @Log4j : 로그 객체 생성

 - Spring 관련 어노테이션 : @Autowired, @Component
     ① @Autowired : 스프링 내부에서 자신이 특정한 객체에 의존적이므로 자신에게 해당 타이의 빈을 주입해주라는 표시
     ② @Component : 해당 클래스가 스프링에서 객체로 만들어서 관리하는 대상임을 명시하는 어노테이션 

 - 테스트 관련 어노테이션 : @RunWith, @ContextConfiguration, @Test
     ① @RunWith : 테스트 시 필요한 클래스 지정
     ② @ContextConfiguration : 스프링이 실행되면서 어떤 설정 정보를 읽어 들여야 하는지를 명시
     ③ @Test : junit에서 해당 메서드가 jUnit상에서 단위 테스트의 대상인지 알려줌
     

★ 03. 스프링과 Oracle Database 연동
 => 교재의 예제들은 관계형 데이터베이스인 Oracle 11g XE를 사용해서 작성
      오라클 설정에서는 SQL Developer 혹은 별도의 프로그램(DBEAVER)를 통해 설치된 데이터베이스에 연결이 가능해야하고,
      JDBC 연결 테스트와 스프링 연동 테스트 반드시 실습!

1. oracle 11g xe 설치
oracle 11g xe 검색 , 클릭 -> 다운로드 클릭 -> 밑으로 내리면 prior Release~ 클릭 -> 다운로드
https://www.oracle.com/database/technologies/xe-prior-releases.html

2. dbeaver 설치
구글 디비버 -> https://dbeaver.io/download/ 다운로드에서 windows 64bit (installer)말고!!!!!!!! windows 64bit (zip)다운로드!!!
압축 _spring에 풀고 dbeaver 바로가기 생성 후, 따로 빼기

+ 교재에서는 SQL Developer 설치(p73~78)
생성되는 스프링의 버전은 3.x이고, JDK 환경 역시 1.6 기준으로 작성되어 있음

3. 프로젝트의 JDBC 연결
1) - SQL Developer를 설치했다면 설치 경로에 jdbc/lib 폴더에 ojdbc8.jar 파일 존재
   - SQL Developer를 설치하지 않았다면 데이터베이스가 설치된 폴더 내부에 jdbc/lib폴더에 ojdbc6.jar 파일 존재
     내 컴퓨터에는 (C:\oraclexe\app\oracle\product\11.2.0\server\jdbc\lib) 경로에 ojdbc6.jar 존재
  
     (1) 원하는 프로젝트 -> Properties -> Java Build path -> Add External JARs 
        -> C:\oraclexe\app\oracle\product\11.2.0\server\jdbc\lib 경로에서 ojdbc6.jar 선택 -> Apply
             => 해당 프로젝트에 Referenced Libraries 생성, 그 안에 ojdbc6.jar 생성
     (2) 원하는 프로젝트 -> Properties -> Deployment Assembly -> ojdbc6.jar -> Apply 

2) JDBC 테스트 코드
- src/test/java에 JDBCTests.java 클래스 추가
- JDBCTests.java
=======================================================================
package org.myweb.persistence;

import static org.junit.Assert.fail;

import java.sql.Connection;
import java.sql.DriverManager;

import org.junit.Test;

import lombok.extern.log4j.Log4j;

@Log4j
public class JDBCTests {
	static {
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
	
@Test
public void testConnection() {
	try(Connection con =
			DriverManager.getConnection(
					"jdbc:oracle:thin:@localhost:1521:XE",
					"springdb",
					"springuser")){
		log.info(">>>>  JDBCTests >>>>" + con );
	}catch (Exception e) {
		fail(e.getMessage());
	}
}
}
=======================================================================
=> JUnit Test 시에, Console에  INFO  com.myweb.ctrl.JDBCTests->>> JDBC TEST>>>oracle.jdbc.driver.T4CConnection@78aab498 가 뜨면
    정상적으로 데이터베이스가 연결된 것
   (처음에 에러가 떠서, log4j2.xml 수정 하니 연결 잘 되었음)

3. 커넥션 풀 설정
  - 여러명의 사용자를 동시에 처리해야 하는 웹 애플리케이션의 경우 데이터베이스 연결을 이용할 때는 ' 커넥션 풀' 이용
  - Java에서는 DataSource라는 인터페이스를 통해서 커넥션 풀 사용
  - 여러 종류가 있고, spring-jdbc 라이브러리를 이용하는 방식도 있지만, 교재에서는 HikariCP 이용
  
 1) 라이브러리 추가와 DataSource 설정
  - pom.xml 수정 (HikariCP 추가)
===================================
 <dependency>
	<groupId>com.zaxxer</groupId>
	<artifactId>HikariCP</artifactId>
	<version>2.7.4</version>
</dependency>
===================================

 - root-context.xml 수정
  => root-context.xml은 스프링이 로딩되면서 읽어들이는 문서이므로, 주로 이미 만들어진 클래스들을 이용해서 스프링의 빈(Bean)으로 등록할 때 사용
  => 프로젝트에 직접 작성하는 클래스들은 어노테이션을 이용하는 경우가 많고,
       외부 jar 파일 등으로 사용하는 클래스들은 <bean> 태그를 이용해서 작성하는 경우가 대부분
==========================================================================================
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/shema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
		<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
			<property name="driverClassName"
				value="oracle.jdbc.driver.OracleDriver"></property>
			<property name="jdbcUrl"
				value="jdbc:oracle:thin:@localhost:1521:XE"></property>
			<property name="username" value="springdb"></property>
			<property name="password" value="springuser"></property>
		</bean>
		
	<!-- HikariCp configuration -->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource"
	destroy-method="close">
	<constructor-arg ref="hikariConfig"/>
	</bean>
	
	<context:component-scan
		base-package="com.myweb.persistence"></context:component-scan>
		
	<context:component-scan
		base-package="com.myweb.service"></context:component-scan>
</beans>
==========================================================================================
- 스프링이 시작되면 root-context.xml을 읽어서 아래와 같은 형태로 id가 datasource인 객체가 처리됨

     Spring의 컨텍스트             Spring의 컨텍스트            Spring의 컨텍스트             Spring의 컨텍스트                                                                                              
  --------------------------       --------------------------       --------------------------       --------------------------
                                  →         hikariConfig         →        hikariConfig           →       hikariConfig                                       
                                                                                                                            ↓
			                                            dataSource                      dataSource
  --------------------------       --------------------------       --------------------------       --------------------------
     root-context.xml

 - 스프링 경험이 많지 않다면, 빈(Bean)을 정의한 다음에는 항상 테스트를 작성하는 습관을 가지는 것이 좋음
  -> src/test/java에 DataSourceTests 클래스 작성 
================================================================================
package org.myweb.persistence;

import static org.junit.Assert.fail;

import java.sql.Connection;

import javax.sql.DataSource;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import lombok.Setter;
import lombok.extern.log4j.Log4j;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration("file:src/main/webapp/WEB-INF/spring/root-context.xml")

@Log4j
public class DataSourceTests {

	@Setter(onMethod_ = { @Autowired })
	private DataSource dataSource;
	@Test
	public void testConnection() {
		
		try(Connection con = dataSource.getConnection()){
			log.info(" >>>> DataSourceTests >>>>"+con);
		}catch(Exception e) {
			fail(e.getMessage());
		}
	}
}
================================================================================

★ 04. MyBatis와 스프링 연동

1. MyBatis
 -> JDBC 코드의 복잡하고 지루한 작업을 피하는 용도로 많이 사용, 
     기존의 SQL을 그대로 활용 가능
   - 자동으로 Connection close() 가능
   - MyBatis 내부적으로  PreparedStatement 처리
   - #{prop}와 같이 속성을 지정하면 내부적으로 자동 처리
   - 리턴 타입을 지정하는 경우 자동으로 객체 생성 및 ResultSet 처리

 1) MyBatis 관련 라이브러리 추가 
 - pom.xml
======================================================
<!-- DB --> 에 추가 
<dependency>
	<groupId>org.mybatis</groupId>
	<artifactId>mybatis</artifactId>
	<version>3.4.6</version>
</dependency>
<dependency>
	<groupId>org.mybatis</groupId>
	<artifactId>mybatis-spring</artifactId>
	<version>1.3.2</version>
</dependency>

<!-- spring --> 에 추가
<dependency>
	<groupId>org.springframework</groupId>
	<artifactId>spring-tx</artifactId>
	<version>${org.springframework-version}</version>
</dependency>
<dependency>
	<groupId>org.springframework</groupId>
	<artifactId>spring-jdbc</artifactId>
	<version>${org.springframework-version}</version>
</dependency>
======================================================
 => spring-jdbc/spring-tx 
   : 스프링에서 데이터베이스 처리와 트랜잭션 처리
     (MyBatis와 무관한게 보이지만 추가하지 않은 경우에 에러 발생)
 => mybatis/mybatis-spring
   : MyBatis와 스프링 연동용 라이브러리

 2) SQLSessionFactory
 - MyBatis에서 가장 핵심적인 객체는 SQLSession, SQLSessionFactroy
 - SQLSessoion을 통해서 Connection을 생성하거나 원하는 SQL 전달, 결과를 리턴 받는 구조로 작성
 - (일부분) root-context.xml 수정 (<!-- HikariCp configuration --> sqlSessionFactory  코드 추가)
==============================================================
<!-- HikariCp configuration -->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource"
	destroy-method="close">
	<constructor-arg ref="hikariConfig"/>
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

==============================================================
 => SqlSessionFactory 등록 작업은 SqlSessionFactoryBean 이용
      패키지명을 보면 MyBatis의 패키지가 아니라 스프링과 연동 작업을 처리하는 mybatis-spring라이브러리의 클래스임을 알 수 있음

2. 스프링과의 연동 처리
- SQLSessionFactory를 이용해서 코드를 작성해도 직접 Connection을 얻어 JDBC 코딩이 가능하지만,
 편하게 작업하기 위해서는 SQL을 어떻게 처리할 것인지 별도의 설정을 분리해주고,
 자동으로 처리되는 방식을 이용하는 것이 좋음 ===> MyBatis의 Mapper 작성
- Mapper
 : SQL과 그에 대한 처리를 지정하는 역할
  MyBatis-Spring을 이용하는 경우에는 Mapper를 XML과 인터페이스 + 어노테이션의 형태로 작성

 1) Mapper 인터페이스
 - src/main/java -> org.myweb.mapper 패키지 생성 -> TimeMapper 인터페이스 생성 
 - TimeMapper.java (인터페이스)
=================================================
package org.myweb.mapper;

import org.apache.ibatis.annotations.Select;

public interface TimeMapper {

	@Select("SELECT sysdate FROM dual")
	public String getTime();
}
=================================================
 => TimeMapper 인터페이스에는 MyBatis의 어노테이션을 이용해서 SQL을 메서드에 추가

 2) Mapper 설정
 -> MyBatis가 동작할 때 Mapper를 인식할 수 있도록 root-context.xml에 추가적인 설정 필요
 -> <mybatis:scan> 태그 이용
 - (일부분) root-context.xml 수정
  -> Namspaces-> mybatis-spring 체크
  -> Source
==============================================================
<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	<property name="dataSource" ref="dataSource"></property>
</bean> 밑에 

<mybatis-spring:scan base-package="org.myweb.mapper"/> 코드 추가 
==============================================================
 => base-package 속성은 지정된 패키지의 모든 MyBatis 관련 어노테이션을 찾아서 처리 

 3) Mapper 테스트
 - src/test/java -> org.myweb.persistence -> TimeMapperTests.java 생성
 - TimeMapperTest.java : TimeMapper가 정상적으로 사용 가능한지 알아보기 위한 테스트 코드
    => 정상적으로 작동 한다면, 스프링 내부에는 TimeMapper 타입으로 만들어진 스프링 객체(빈)가 존재
===============================================================
package org.myweb.persistence;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.myweb.mapper.TimeMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import lombok.Setter;
import lombok.extern.log4j.Log4j;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration("file:src/main/webapp/WEB-INF/spring/root-context.xml")

@Log4j
public class TimeMapperTests {
	
	@Setter(onMethod_ = @Autowired)
	private TimeMapper timeMapper;
	
	@Test
	public void testGetTime() {
		log.info(timeMapper.getClass().getName());
		log.info(timeMapper.getTime());
	}

}
===============================================================
 => timeMapper.getClass().getName()은 실제 동작하는 클래스의 이름을 확인 해줌
      실행 결과를 보면 개발 시 인터페이스만 만들어 주었는데 내부적으로 적당한 클래스가 만들어 진 것을 확인 할 수 있음

 4) XML 매퍼와 같이 쓰기
 -  MyBatis-Spring의 경우 Mapper인터페이스와 XML을 동시에 이용 가능
 - src/main/resources -> org 폴더생성 -> 하위에 myweb폴더 생성 -> 하위에 mapper 폴더 생성 -> 하위에 TimeMapper.xml 생성
 - Mapper 인터페이스와  XML을 같이 이용해 보기 위해서  기존의 TimeMapper 인터페이스에 추가적인 메서드 선언
 - TimeMapper.java(인터페이스)
=========================================================
package org.myweb.mapper;

import org.apache.ibatis.annotations.Select;

public interface TimeMapper {

	@Select("SELECT sysdate FROM dual")
	public String getTime();
	
	public String getTime2();     <------- 코드 추가
}
=========================================================
 - TimeMapper.xml
=========================================================
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 	"http://mybatis-org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="org.myweb.mapper.TimeMapper">
 	
    <select id="getTime2" resultType="string">
     SELECT sysdate FROM dual
    </select>
 	
 </mapper>
=========================================================
 => XML 매퍼를 이용 할때 주의해야 할 부분은 <mapper>태그의 namespace 속성값
      MyBatis는 Mapper 인터페이스와 XML을 인터페이서의 이름과 namespace 속성값을 가지고 판단
 => <select> 태그의 id 속성의 값은 메서드의 이름과 동일하게 맞춰야 함.
      <select> 태그의 경우 resultType 속성을 가짐, 이 값은 인터페이스에 선언된 메서드의 리턴 타입과 동일하게 작성


- (일부분) TimeMapperTests.java (최종적인 확인) -> getTime2() 와 getTIme() 결과 동일
============================================================
	@Test
	public void testGetTime2() {
		log.info("GetTime2()");
		log.info(timeMapper.getTime2());
	}                                                     ------>  코드 추가
	
============================================================

 5) log4jdbc-log4j2 설정
- MyBatis는 내부적으로 JDBC의 PreparedStatement를 이용해서 SQL 처리
- SQL 로그를 제대로 보기위해서는 log4jdbc-log4j2 라이브러리를 사용해야함
  
(1) pom.xml에 라이브러리 설정
- pom.xml
==========================================
<!--logging-->에 추가
<dependency>
	<groupId>org.bgee.log4jdbc-log4j2</groupId>
	<artifactId>log4jdbc-log4j2-jdbc4</artifactId>
	<version>1.16</version>
</dependency>
==========================================

(2) src/main/resources -> log4jdbc.log4j2.properties 파일 생성
=> log4jdbc.spylogdelegator.name=net.sf.log4jdbc.log.slf4j.Slf4jSpyLogDelegator 추가

 (3) root-context.xml 코드 수정
==================================================================
<!-- Root Context: defines shared resources visible to all other web components -->
<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">

<!-- <property name="driverClassName"
	value="oracle.jdbc.driver.OracleDriver"></property>
     <property name="jdbcUrl"
            value="jdbc:oracle:thin:@localhost:1521:XE"></property> -->

<property name="driverClassName"
	value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property>
<property name="jdbcUrl"
	value="jdbc:log4jdbc:oracle:thin:@localhost:1521:XE"></property>
<property name="username" value="springdb"></property>
<property name="password" value="springuser"></property>
</bean>
===================================================================
 => dataSource() 메서드에서 변경되는 부분은 
      JDBC 드라이버의 클래스를 'net.st.log4jdbc.sql.jdbcapi.DriverSpy로 수정하는 작업과
      JDBC 연결 URL 부분에서 중간에 'log4jdbc' 문자열이 추가되는 부분
      ->  두 설정이 제대로 되어야 데이터베이스 로그가 정상적으로 기록

 6) 로그의 레벨 설정
 - 테스트 로그 실행 시, 상당히 많은 로그가 출력 되어 수정
 - 테스트 로그 실행 시 로그와 관련된 설정은 src/test/resources -> log4j.xml을 이용
 - log4j.xml (출력되는 로그를 조절 하고 싶을 때, <logger>을 지정해서 처리)
=======================================================
<logger name="jdbc.audit">
	<level value="warn"></level>
</logger>
	
<logger name="jdbc.resultset">
	<level value="warn"></level>
</logger>
	
<logger name="jdbc.connection">
	<level value="warn"></level>
</logger>
========================================================
 => 기본 설정의 로그는 info 레벨이기 때문에 warn과 같이 좀 더 높은 레벨의 로그만 기록하게 수정하면
     테스트 코드를 실행할 때 로그의 양이 줄어듬.





